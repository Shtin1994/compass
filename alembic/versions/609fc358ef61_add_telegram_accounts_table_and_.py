# alembic/script.py.mako
"""add telegram_accounts table and performance indexes

Revision ID: 609fc358ef61
Revises: 
Create Date: 2025-08-03 13:54:14.705905

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '609fc358ef61'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('channels',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('telegram_id', sa.BigInteger(), nullable=False, comment='Уникальный числовой ID канала в Telegram.'),
    sa.Column('name', sa.String(), nullable=True, comment='Публичное имя канала (@username), если есть.'),
    sa.Column('title', sa.String(), nullable=False, comment='Отображаемое название канала.'),
    sa.Column('about', sa.Text(), nullable=True, comment="Описание ('bio') канала."),
    sa.Column('participants_count', sa.Integer(), nullable=True, comment='Количество подписчиков.'),
    sa.Column('is_verified', sa.Boolean(), server_default='false', nullable=False, comment='Флаг верификации от Telegram.'),
    sa.Column('is_scam', sa.Boolean(), server_default='false', nullable=False, comment="Флаг 'scam' от Telegram."),
    sa.Column('collection_is_active', sa.Boolean(), server_default='true', nullable=False, comment='Включен ли автоматический сбор данных для этого канала.'),
    sa.Column('collection_schedule', sa.String(), server_default='*/30 * * * *', nullable=False, comment='Расписание сбора в формате CRON.'),
    sa.Column('last_collection_status', sa.String(), nullable=True, comment='Статус последней операции сбора.'),
    sa.Column('last_collection_error', sa.Text(), nullable=True, comment='Текст последней ошибки сбора.'),
    sa.Column('last_successful_run_at', sa.DateTime(timezone=True), nullable=True, comment='Время последнего успешного завершения сбора.'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_channels_name'), 'channels', ['name'], unique=False)
    op.create_index(op.f('ix_channels_telegram_id'), 'channels', ['telegram_id'], unique=True)
    op.create_table('outbox_tasks',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('task_name', sa.String(), nullable=False),
    sa.Column('task_kwargs', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'PROCESSING', 'PUBLISHED', 'FAILED', name='outbox_task_status_enum'), nullable=False),
    sa.Column('retry_count', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('processed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_outbox_tasks_status'), 'outbox_tasks', ['status'], unique=False)
    op.create_index(op.f('ix_outbox_tasks_task_name'), 'outbox_tasks', ['task_name'], unique=False)
    op.create_table('telegram_accounts',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('session_string', sa.Text(), nullable=False, comment='Строка сессии Telethon для аутентификации.'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Активен ли аккаунт для использования в сборе (управляется вручную).'),
    sa.Column('is_banned', sa.Boolean(), nullable=False, comment='Забанен ли аккаунт (управляется автоматически системой).'),
    sa.Column('last_used_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Время последнего использования для ротации.'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('session_string')
    )
    op.create_index(op.f('ix_telegram_accounts_is_active'), 'telegram_accounts', ['is_active'], unique=False)
    op.create_index(op.f('ix_telegram_accounts_is_banned'), 'telegram_accounts', ['is_banned'], unique=False)
    op.create_table('telegram_users',
    sa.Column('telegram_id', sa.BigInteger(), autoincrement=False, nullable=False, comment='Уникальный ID пользователя Telegram. Первичный ключ.'),
    sa.Column('first_name', sa.String(), nullable=True, comment='Имя пользователя.'),
    sa.Column('last_name', sa.String(), nullable=True, comment='Фамилия пользователя.'),
    sa.Column('username', sa.String(), nullable=True, comment='Публичное имя (@username) пользователя.'),
    sa.Column('is_bot', sa.Boolean(), server_default='false', nullable=False, comment='Является ли пользователь ботом.'),
    sa.PrimaryKeyConstraint('telegram_id')
    )
    op.create_index(op.f('ix_telegram_users_username'), 'telegram_users', ['username'], unique=False)
    op.create_table('posts',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('channel_id', sa.Integer(), nullable=False),
    sa.Column('telegram_id', sa.BigInteger(), nullable=False),
    sa.Column('url', sa.String(), nullable=True, comment='Прямая ссылка на пост для быстрого доступа из UI.'),
    sa.Column('reply_to_message_id', sa.BigInteger(), nullable=True, comment='ID сообщения, на которое этот пост является ответом (для анализа цепочек).'),
    sa.Column('grouped_id', sa.BigInteger(), nullable=True, comment="ID для объединения постов, отправленных как 'альбом'."),
    sa.Column('media', sa.JSON(), nullable=True, comment='Метаданные о медиа (тип, имя файла), но не сам файл.'),
    sa.Column('forward_info', sa.JSON(), nullable=True, comment='Информация о пересылке (откуда, кем). Ключ к анализу виральности.'),
    sa.Column('poll', sa.JSON(), nullable=True, comment='Структурированные данные опроса (вопрос, ответы, голоса).'),
    sa.Column('text', sa.Text(), nullable=True, comment='Текстовое содержимое поста.'),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False, comment='Дата и время публикации поста.'),
    sa.Column('views_count', sa.Integer(), nullable=False, comment='Количество просмотров.'),
    sa.Column('reactions', sa.JSON(), nullable=True, comment='Словарь с реакциями и их количеством.'),
    sa.Column('forwards_count', sa.Integer(), nullable=False, comment='Количество пересылок поста.'),
    sa.Column('last_comment_telegram_id', sa.BigInteger(), nullable=True, comment="ID последнего собранного комментария для оптимизации 'досборки'."),
    sa.Column('comments_last_collected_at', sa.DateTime(timezone=True), nullable=True, comment='Время последнего сбора комментариев для этого поста.'),
    sa.Column('stats_last_updated_at', sa.DateTime(timezone=True), nullable=True, comment='Время последнего обновления статистики (просмотры, реакции).'),
    sa.ForeignKeyConstraint(['channel_id'], ['channels.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('channel_id', 'telegram_id', name='uq_post_channel_telegram')
    )
    op.create_index(op.f('ix_posts_created_at'), 'posts', ['created_at'], unique=False)
    op.create_index(op.f('ix_posts_telegram_id'), 'posts', ['telegram_id'], unique=False)
    op.create_table('comments',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('post_id', sa.Integer(), nullable=False),
    sa.Column('telegram_id', sa.BigInteger(), nullable=False),
    sa.Column('author_id', sa.BigInteger(), nullable=True, comment="Внешний ключ на автора в таблице 'telegram_users'."),
    sa.Column('reply_to_comment_id', sa.BigInteger(), nullable=True, comment='ID комментария, на который этот является ответом.'),
    sa.Column('text', sa.Text(), nullable=True, comment='Текстовое содержимое комментария.'),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False, comment='Дата и время публикации комментария.'),
    sa.Column('reactions', sa.JSON(), nullable=True, comment='Словарь с реакциями на комментарий.'),
    sa.ForeignKeyConstraint(['author_id'], ['telegram_users.telegram_id'], ),
    sa.ForeignKeyConstraint(['post_id'], ['posts.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('post_id', 'telegram_id', name='uq_comment_post_telegram')
    )
    op.create_index(op.f('ix_comments_created_at'), 'comments', ['created_at'], unique=False)
    op.create_index(op.f('ix_comments_telegram_id'), 'comments', ['telegram_id'], unique=False)
    op.create_table('post_analysis',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('post_id', sa.Integer(), nullable=False),
    sa.Column('summary', sa.Text(), nullable=True),
    sa.Column('sentiment', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('key_topics', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('generated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('model_used', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['post_id'], ['posts.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_post_analysis_post_id'), 'post_analysis', ['post_id'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_post_analysis_post_id'), table_name='post_analysis')
    op.drop_table('post_analysis')
    op.drop_index(op.f('ix_comments_telegram_id'), table_name='comments')
    op.drop_index(op.f('ix_comments_created_at'), table_name='comments')
    op.drop_table('comments')
    op.drop_index(op.f('ix_posts_telegram_id'), table_name='posts')
    op.drop_index(op.f('ix_posts_created_at'), table_name='posts')
    op.drop_table('posts')
    op.drop_index(op.f('ix_telegram_users_username'), table_name='telegram_users')
    op.drop_table('telegram_users')
    op.drop_index(op.f('ix_telegram_accounts_is_banned'), table_name='telegram_accounts')
    op.drop_index(op.f('ix_telegram_accounts_is_active'), table_name='telegram_accounts')
    op.drop_table('telegram_accounts')
    op.drop_index(op.f('ix_outbox_tasks_task_name'), table_name='outbox_tasks')
    op.drop_index(op.f('ix_outbox_tasks_status'), table_name='outbox_tasks')
    op.drop_table('outbox_tasks')
    op.drop_index(op.f('ix_channels_telegram_id'), table_name='channels')
    op.drop_index(op.f('ix_channels_name'), table_name='channels')
    op.drop_table('channels')
    # ### end Alembic commands ###